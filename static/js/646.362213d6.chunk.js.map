{"version":3,"file":"static/js/646.362213d6.chunk.js","mappings":"gPAEaA,E,QAAYC,EAAAA,IAAH,sB,6BCGTC,EAAS,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,cACjBC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJG,QACC,mDACA,iBAEDC,SAAS,0BAEZC,SAAUL,EAAAA,KAAaI,SAAS,4BAVuB,wCAazD,WACEE,EADF,mFAEIC,EAFJ,EAEIA,UAFJ,SAIwBR,EAAOS,QAAQF,GAJvC,gBAOUG,GADK,UACSH,GAEER,EAAcW,IAGlCF,KAZN,4CAbyD,sBA8BzD,OACE,SAACZ,EAAD,WACE,SAAC,KAAD,CACEe,cAAe,CAAER,MAAO,GAAIG,SAAU,IACtCM,SAlCmD,8CAmCnDC,iBAAkBb,EAHpB,UAKE,UAAC,KAAD,YACE,6BAAO,SAEL,SAAC,KAAD,CAAOc,KAAK,QAAQC,KAAK,QAAQC,YAAY,sBAC7C,2BACE,SAAC,KAAD,CAAcD,KAAK,gBAIvB,6BAAO,YAEL,SAAC,KAAD,CACED,KAAK,WACLC,KAAK,WACLC,YAAY,yBAEd,2BACE,SAAC,KAAD,CAAcD,KAAK,mBAIvB,mBAAQD,KAAK,SAAb,SAAsB,iBAK/B,E,oBChDD,EAfmB,WACjB,IAAMG,GAAWC,EAAAA,EAAAA,KAOjB,OACE,0BACE,SAACpB,EAAD,CAAQC,cAPU,SAACoB,GAGrB,OAFAC,QAAQC,IAAIF,GACZF,GAASK,EAAAA,EAAAA,IAAMH,KACR,CACR,KAMF,C","sources":["components/SignIn/SignIn.styled.tsx","components/SignIn/SignIn.tsx","pages/SignInPage/SignInPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div``;\n","import { Container } from './SignIn.styled';\nimport { Formik, Form as FormikForm, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { ISignInProps, ISignInData } from '../../interfaces';\n\nexport const SignIn = ({ signInHandler }: ISignInProps) => {\n  const schema = yup.object().shape({\n    email: yup\n      .string()\n      .matches(\n        /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n        'Invalid email'\n      )\n      .required('This field is required'),\n\n    password: yup.string().required('This field is required'),\n  });\n\n  async function submitHandler(\n    values: ISignInData,\n    { resetForm }: { resetForm: () => void }\n  ): Promise<void> {\n    const isValid = await schema.isValid(values);\n\n    if (isValid) {\n      const result = { ...values };\n\n      const isSuccessfull = signInHandler(result);\n\n      if (isSuccessfull) {\n        resetForm();\n      }\n    }\n  }\n\n  return (\n    <Container>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={submitHandler}\n        validationSchema={schema}\n      >\n        <FormikForm>\n          <label>\n            Email\n            <Field type=\"email\" name=\"email\" placeholder=\"Enter your email\" />\n            <span>\n              <ErrorMessage name=\"email\" />\n            </span>\n          </label>\n\n          <label>\n            Password\n            <Field\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Enter your password\"\n            />\n            <span>\n              <ErrorMessage name=\"password\" />\n            </span>\n          </label>\n\n          <button type=\"submit\">Submit</button>\n        </FormikForm>\n      </Formik>\n    </Container>\n  );\n};\n","import { SignIn } from '../../components/SignIn/SignIn';\nimport { ISignInData } from '../../interfaces';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { logIn } from '../../redux/auth/operations';\n\nconst SignInPage = () => {\n  const dispatch = useAppDispatch();\n\n  const signInHandler = (data: ISignInData) => {\n    console.log(data);\n    dispatch(logIn(data));\n    return true;\n  };\n  return (\n    <div>\n      <SignIn signInHandler={signInHandler}></SignIn>\n    </div>\n  );\n};\n\nexport default SignInPage;\n"],"names":["Container","styled","SignIn","signInHandler","schema","yup","shape","email","matches","required","password","values","resetForm","isValid","result","initialValues","onSubmit","validationSchema","type","name","placeholder","dispatch","useAppDispatch","data","console","log","logIn"],"sourceRoot":""}