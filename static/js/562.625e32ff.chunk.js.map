{"version":3,"file":"static/js/562.625e32ff.chunk.js","mappings":"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","sources":["constants.ts","components/Form/Form.styled.tsx","components/Form/Form.tsx","components/ContactsList/Contactslist.styled.tsx","components/Contact/Contact.styled.tsx","components/Contact/Contact.tsx","components/ContactsList/Contactslist.tsx","components/Filter/Filter.styled.tsx","components/Filter/Filter.tsx","pages/ContactsPage/ContactsPage.styled.tsx","components/StatusIndicator/StatusIndicator.styled.tsx","components/StatusIndicator/StatusIndicator.tsx","pages/ContactsPage/ContactsPage.tsx"],"sourcesContent":["export const colors = {\n  bg: {\n    primary: '#2a2e70',\n    contact: '#353a8e',\n  },\n  button: {\n    newContactButtonPrimary: '#2a0096',\n    newContactButtonHover: '#3604b3',\n    contactButtonPrimary: '#353a8e',\n    contactButtonHover: '#2a0096',\n  },\n  text: {\n    primary: '#dbe3ff',\n    dark: '#767881',\n  },\n};\n\nexport const animations = {\n  time: '350ms',\n  cubic: 'linear',\n};\n","import styled from '@emotion/styled';\nimport { colors, animations } from '../../constants';\n\nexport const Container = styled.div`\n  display: flex;\n  flex-direction: column;\n  gap: 10px;\n  margin-bottom: 30px;\n  label {\n    display: block;\n    width: 100%;\n\n    input {\n      font-size: 18px;\n      display: block;\n      padding: 21px 25px;\n      border: 1px solid ${colors.text.primary};\n      width: 100%;\n      background-color: ${colors.bg.primary};\n      color: ${colors.text.primary};\n\n      border-radius: 15px;\n    }\n    span {\n      display: block;\n      color: red;\n      font-size: 20px;\n      min-height: 23px;\n    }\n  }\n\n  button {\n    cursor: pointer;\n    margin-top: 30px;\n    font-size: 20px;\n    border: none;\n    border-radius: 8%/50%;\n    background-color: ${colors.button.newContactButtonPrimary};\n    color: ${colors.text.primary};\n    padding: 15px 20px;\n    transition: background-color ${animations.time} ${animations.cubic};\n    :hover {\n      background-color: ${colors.button.newContactButtonHover};\n    }\n  }\n`;\n","import React from 'react';\nimport { Container } from './Form.styled';\nimport { Formik, Form as FormikForm, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { IFormProps } from '../../interfaces';\nimport shortid from 'shortid';\n\nexport const Form = ({ formSubmit }: IFormProps) => {\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(6, 'Minimum input length 6 symbols')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Invalid format'\n      )\n      .required('This field is required')\n      .trim(),\n    number: yup\n      .string()\n      .min(3, 'Minimum input length 3 symbols')\n      .matches(\n        /^\\+?\\d{1,4}?[-.\\s]?\\(?\\d{1,3}?\\)?[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,4}[-.\\s]?\\d{1,9}$/,\n        'Invalid format'\n      )\n      .required('This field is required'),\n  });\n\n  async function submitHandler(\n    values: {\n      name: string;\n      number: string;\n    },\n    { resetForm }: { resetForm: () => void }\n  ): Promise<void> {\n    const isValid = await schema.isValid(values);\n\n    if (isValid) {\n      const result = { ...values, id: shortid.generate() };\n\n      const isSuccessfull = formSubmit(result);\n\n      if (isSuccessfull) {\n        resetForm();\n      }\n    }\n  }\n\n  return (\n    <Container>\n      <Formik\n        initialValues={{ name: '', number: '' }}\n        onSubmit={submitHandler}\n        validationSchema={schema}\n      >\n        <FormikForm>\n          <label>\n            Name\n            <Field type=\"text\" name=\"name\" placeholder=\"Name your contact\" />\n            <span>\n              <ErrorMessage name=\"name\" />\n            </span>\n          </label>\n\n          <label>\n            Number\n            <Field\n              type=\"tel\"\n              name=\"number\"\n              placeholder=\"Paste or type the number\"\n            />\n            <span>\n              <ErrorMessage name=\"number\" />\n            </span>\n          </label>\n\n          <button type=\"submit\">Add contact</button>\n        </FormikForm>\n      </Formik>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\nimport { BiSearchAlt2 } from 'react-icons/bi';\nimport { colors } from '../../constants';\n\nexport const Container = styled.div`\n  width: 100%;\n  input {\n    width: 100%;\n  }\n  div {\n    position: relative;\n  }\n  h2 {\n    margin-bottom: 10px;\n  }\n  ul {\n    list-style: none;\n    padding: 0;\n    font-size: 20px;\n    display: flex;\n    flex-direction: column;\n    gap: 10px;\n    max-height: 334px;\n    overflow-y: auto;\n  }\n  label {\n    display: block;\n    margin-bottom: 10px;\n    font-size: 25px;\n  }\n  input {\n    font-size: 18px;\n    display: block;\n    padding: 21px 25px;\n    border: 1px solid ${colors.text.primary};\n    width: 100%;\n    background-color: ${colors.bg.primary};\n    color: ${colors.text.primary};\n    border-radius: 8%/50%;\n  }\n`;\n\nexport const StyledSearchIcon = styled(BiSearchAlt2)`\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  right: 20px;\n  top: 50%;\n  color: ${colors.text.primary};\n  transform: translateY(-50%);\n`;\n","import styled from '@emotion/styled';\nimport { colors, animations } from '../../constants';\n\nexport const Container = styled.li`\n  background-color: ${colors.bg.contact};\n  width: 100%;\n  border-radius: 15px;\n  display: flex;\n  padding: 15px 25px;\n  justify-content: space-between;\n  align-items: center;\n  transition: background-color ${animations.time} ${animations.cubic};\n  div {\n    max-width: 80%;\n\n    p {\n      margin: 0;\n      overflow: hidden;\n      text-overflow: ellipsis;\n    }\n  }\n\n  button {\n    width: 43px;\n    height: 43px;\n    cursor: pointer;\n    opacity: 0;\n    transition: opacity ${animations.time} ${animations.cubic};\n    background-color: ${colors.button.contactButtonPrimary};\n    border: 1px solid white;\n    border-radius: 50%;\n    display: flex;\n    align-items: center;\n    justify-content: center;\n    margin: 0;\n  }\n\n  &:hover {\n    background-color: ${colors.bg.contact};\n    button {\n      opacity: 1;\n      transition: background-color ${animations.time} ${animations.cubic};\n      &:hover {\n        background-color: ${colors.button.contactButtonHover};\n      }\n    }\n  }\n`;\n","import React from 'react';\nimport { Container } from './Contact.styled';\nimport { BsTrash3 } from 'react-icons/bs';\nimport { IContactProps } from '../../interfaces';\n\nexport const Contact = ({ name, number, id, deleteHandler }: IContactProps) => {\n  const handleDeleteClick = () => {\n    deleteHandler(id);\n  };\n\n  return (\n    <Container>\n      <div>\n        <p>{name}</p>\n        <p>{number}</p>\n      </div>\n\n      <button type=\"button\" onClick={handleDeleteClick}>\n        <BsTrash3 size=\"16px\" color=\"white\" />\n      </button>\n    </Container>\n  );\n};\n","import { Container } from './Contactslist.styled';\nimport { IContactsListProps } from '../../interfaces';\nimport { Contact } from '../Contact/Contact';\n\nimport { useAppSelector } from '../../redux/hooks';\nimport { getIsLoading } from '../../redux/contacts/slices/contactsSlice';\nimport { LinearProgress } from '@mui/material';\n\nexport const ContactsList = ({\n  filteredContacts,\n  contactDeleteHandler,\n}: IContactsListProps) => {\n  const isLoading = useAppSelector(getIsLoading);\n\n  return !isLoading ? (\n    <Container>\n      <ul>\n        {filteredContacts.map(item => (\n          <Contact\n            name={item.name}\n            number={item.number}\n            id={item.id}\n            key={item.id}\n            deleteHandler={contactDeleteHandler}\n          />\n        ))}\n      </ul>\n    </Container>\n  ) : (\n    <LinearProgress />\n  );\n};\n","import styled from '@emotion/styled';\nimport { BiSearchAlt2 } from 'react-icons/bi';\nimport { colors } from '../../constants';\n\nexport const Container = styled.div`\n  div {\n    position: relative;\n  }\n  label {\n    display: block;\n    margin-bottom: 10px;\n    font-size: 25px;\n  }\n  input {\n    font-size: 18px;\n    display: block;\n    padding: 21px 25px;\n    border: 1px solid ${colors.text.primary};\n    width: 100%;\n    background-color: ${colors.bg.primary};\n    color: ${colors.text.primary};\n    border-radius: 8%/50%;\n  }\n`;\n\nexport const StyledSearchIcon = styled(BiSearchAlt2)`\n  position: absolute;\n  width: 40px;\n  height: 40px;\n  right: 20px;\n  top: 50%;\n  color: ${colors.text.primary};\n  transform: translateY(-50%);\n`;\n","import React from 'react';\nimport { Container } from './Filter.styled';\nimport { StyledSearchIcon } from './Filter.styled';\nimport { IFilterProps } from '../../interfaces';\n\nexport const Filter = ({ contactsFilter }: IFilterProps) => {\n  const searchHandler = (e: React.ChangeEvent<HTMLInputElement>): void => {\n    contactsFilter(e.target.value);\n  };\n\n  return (\n    <Container>\n      <label htmlFor=\"search-input\">Find contacts by name</label>\n      <div>\n        <input\n          type=\"text\"\n          name=\"\"\n          id=\"search-input\"\n          onChange={searchHandler}\n          placeholder=\"Type to find...\"\n        />\n        <StyledSearchIcon />\n      </div>\n    </Container>\n  );\n};\n","import styled from '@emotion/styled';\n\nimport { colors } from '../../constants';\n\nexport const Container = styled.div`\n  /* position: fixed; */\n  /* width: min(400px, 100%); */\n  background-color: ${colors.bg.primary};\n  min-height: 100%;\n  /* height: 100vh; */\n\n  font-family: 'Trebuchet MS', 'Lucida Sans Unicode', 'Lucida Grande',\n    'Lucida Sans', Arial, sans-serif;\n  justify-content: center;\n  align-items: center;\n  font-size: 30px;\n  color: #dbe3ff;\n  padding: 20px 10px;\n\n  h2 {\n    margin: 0;\n  }\n\n  .contacts-container {\n    display: flex;\n    justify-content: center;\n    flex-wrap: wrap;\n    column-gap: 30px;\n    margin: 0 auto;\n    .contacts-form-container {\n      width: 310px;\n    }\n    .contacts-list-container {\n      width: 310px;\n    }\n  }\n`;\n","import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  width: 20px;\n  height: 20px;\n  display: flex;\n  justify-content: center;\n  align-items: center;\n  margin-left: auto;\n  margin-right: 10px;\n\n  .ok-indicator {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: green;\n  }\n\n  .error-indicator {\n    width: 20px;\n    height: 20px;\n    border-radius: 50%;\n    background-color: red;\n  }\n`;\n","import { Container } from './StatusIndicator.styled';\nimport { Puff } from 'react-loader-spinner';\n\nimport { useAppSelector } from '../../redux/hooks';\n// import { getIsLoading, getError } from '../../redux/slices/contactsSlice';\nimport {\n  getIsLoading,\n  getError,\n} from '../../redux/contacts/slices/contactsSlice';\n\nexport const StatusIndicator = () => {\n  const isLoading = useAppSelector(getIsLoading);\n  const error = useAppSelector(getError);\n\n  if (error) {\n    return (\n      <Container>\n        <div className=\"error-indicator\"></div>\n      </Container>\n    );\n  }\n  if (isLoading) {\n    return (\n      <Container>\n        {isLoading && !error && (\n          <Puff\n            height=\"20\"\n            width=\"20\"\n            radius={1}\n            color=\"#4fa94d\"\n            ariaLabel=\"puff-loading\"\n            wrapperStyle={{}}\n            wrapperClass=\"\"\n            visible={true}\n          />\n        )}\n      </Container>\n    );\n  }\n  return (\n    <Container>\n      <div className=\"ok-indicator\"></div>\n    </Container>\n  );\n};\n","import React, { useEffect } from 'react';\nimport { Form } from '../../components/Form/Form';\nimport { ContactsList } from '../../components/ContactsList/Contactslist';\nimport { ModernNormalize } from 'emotion-modern-normalize';\nimport { Filter } from '../../components/Filter/Filter';\nimport { Container } from './ContactsPage.styled';\nimport { IContact } from '../../interfaces';\nimport { ToastContainer, toast } from 'react-toastify';\nimport {\n  updateFilter,\n  getFilter,\n} from '../../redux/contacts/slices/filterSlice';\n\nimport { getContacts } from '../../redux/contacts/slices/contactsSlice';\n\nimport {\n  fetchContacts,\n  addContact,\n  removeContact,\n} from '../../redux/contacts/operations';\nimport 'react-toastify/dist/ReactToastify.css';\n\nimport { useAppDispatch, useAppSelector } from '../../redux/hooks';\n\nimport { StatusIndicator } from '../../components/StatusIndicator/StatusIndicator';\n\nconst ContactsPage = () => {\n  const dispatch = useAppDispatch();\n\n  const filter = useAppSelector(getFilter);\n  const contacts = useAppSelector(getContacts);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  ///Saves contact to contacts if there is no contact with such name\n  const formSubmitHandler = (data: IContact): boolean => {\n    const normalizedName = data.name.toLowerCase();\n    if (\n      !contacts.some(\n        (item: IContact) => item.name.toLowerCase() === normalizedName\n      )\n    ) {\n      dispatch(addContact({ name: data.name, number: data.number }));\n      return true;\n    } else {\n      toast(`${data.name} is already in contacts.`);\n\n      return false;\n    }\n  };\n\n  ///Deletes contact\n  const contactDeleteHandler = (id: string): void => {\n    dispatch(removeContact(id));\n  };\n\n  /// Sets contacts filter\n  const contactsFilter = (value: string): void => {\n    dispatch(updateFilter(value.toLowerCase()));\n  };\n\n  const filteredContacts = contacts.filter((item: IContact): boolean =>\n    item.name.toLowerCase().includes(filter)\n  );\n\n  return (\n    <Container>\n      <ModernNormalize />\n      <div className=\"contacts-container\">\n        <div className=\"contacts-form-container\">\n          <h2>Add new contacts</h2>\n\n          <Form formSubmit={formSubmitHandler}></Form>\n          <StatusIndicator />\n        </div>\n\n        <div className=\"contacts-list-container\">\n          <h2>Your contacts</h2>\n          <Filter contactsFilter={contactsFilter} />\n          <ContactsList\n            filteredContacts={filteredContacts}\n            contactDeleteHandler={contactDeleteHandler}\n          />\n        </div>\n      </div>\n\n      <ToastContainer />\n    </Container>\n  );\n};\n\nexport default ContactsPage;\n"],"names":["colors","primary","contact","newContactButtonPrimary","newContactButtonHover","contactButtonPrimary","contactButtonHover","dark","animations","Container","styled","Form","formSubmit","schema","yup","shape","name","min","matches","required","trim","number","values","resetForm","isValid","result","id","shortid","initialValues","onSubmit","validationSchema","type","placeholder","BiSearchAlt2","Contact","deleteHandler","onClick","size","color","ContactsList","filteredContacts","contactDeleteHandler","useAppSelector","getIsLoading","LinearProgress","map","item","StyledSearchIcon","Filter","contactsFilter","htmlFor","onChange","e","target","value","StatusIndicator","isLoading","error","getError","className","height","width","radius","ariaLabel","wrapperStyle","wrapperClass","visible","dispatch","useAppDispatch","filter","getFilter","contacts","getContacts","useEffect","fetchContacts","toLowerCase","includes","data","normalizedName","some","toast","addContact","updateFilter","removeContact"],"sourceRoot":""}