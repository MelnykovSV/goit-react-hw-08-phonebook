{"version":3,"file":"static/js/145.7421df4f.chunk.js","mappings":"8TAWaA,EAAS,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,cACjBC,GAAYC,EAAAA,EAAAA,GAAeC,EAAAA,IAE3BC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,IAAI,EAAG,kCACPC,QACC,yHACA,kBAEDC,SAAS,0BACTC,OACHC,MAAOP,EAAAA,KAEJI,QACC,mDACA,iBAEDC,SAAS,0BAEZG,SAAUR,EAAAA,KAEPG,IAAI,EAAG,kCACPC,QAAQ,SAAU,sDAClBA,QAAQ,SAAU,sDAClBA,QAAQ,SAAU,8CAClBC,SAAS,4BA3B2C,wCA8BzD,WACEI,EADF,mFAEIC,EAFJ,EAEIA,UAFJ,SAIwBX,EAAOY,QAAQF,GAJvC,gBAOUG,GADK,UACSH,GAEEd,EAAciB,IAGlCF,KAZN,4CA9ByD,sBA+CzD,OACE,UAAC,IAAD,CAAWG,UAAU,iBAArB,WACE,wBAAI,aACJ,uBAAG,0BACH,SAAC,KAAD,CACEC,cAAe,CAAEZ,KAAM,GAAIK,MAAO,GAAIC,SAAU,IAChDO,SArDmD,8CAsDnDC,iBAAkBjB,EAHpB,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,CACEkB,UAAWC,EAAAA,EACXC,KAAK,OACLjB,KAAK,OACLkB,WAAS,EACTC,WAAS,EACTC,MAAM,kBACNC,KAAK,QACLC,OAAO,YAGT,SAAC,KAAD,CACEP,UAAWC,EAAAA,EACXC,KAAK,QACLjB,KAAK,QACLkB,WAAS,EACTE,MAAM,mBACNC,KAAK,QACLC,OAAO,YAET,SAAC,KAAD,CACEP,UAAWC,EAAAA,EACXC,KAAK,WACLjB,KAAK,WACLkB,WAAS,EACTE,MAAM,sBACNC,KAAK,QACLC,OAAO,WAGR5B,IAAa,SAAC6B,EAAA,EAAD,KAEd,SAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUT,KAAK,SAAjD,SAA0D,kBAOnE,E,UCxFD,EAdmB,WACjB,IAAMU,GAAWC,EAAAA,EAAAA,KAMjB,OACE,0BACE,SAACpC,EAAD,CAAQC,cANU,SAACoC,GAErB,OADAF,GAASG,EAAAA,EAAAA,IAAOD,KACT,CACR,KAMF,C","sources":["components/SignUp/SignUp.tsx","pages/SignUpPage/SignUpPage.tsx"],"sourcesContent":["import { Container } from './SignUp.styled';\nimport { Formik, Form as FormikForm, Field } from 'formik';\nimport * as yup from 'yup';\nimport { ISignUpProps, ISignUpData } from '../../interfaces';\n\nimport { TextField } from 'formik-mui';\nimport { Button, LinearProgress } from '@mui/material';\n\nimport { getIsLoading } from '../../redux/auth/authSlice';\nimport { useAppSelector } from '../../redux/hooks';\n\nexport const SignUp = ({ signUpHandler }: ISignUpProps) => {\n  const isLoading = useAppSelector(getIsLoading);\n\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(3, 'Minimum input length 3 symbols')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Invalid format'\n      )\n      .required('This field is required')\n      .trim(),\n    email: yup\n      .string()\n      .matches(\n        /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n        'Invalid email'\n      )\n      .required('This field is required'),\n\n    password: yup\n      .string()\n      .min(6, 'Minimum input length 6 symbols')\n      .matches(/[a-z]+/, 'Password shout contain at least one regular letter')\n      .matches(/[A-Z]+/, 'Password shout contain at least one capital letter')\n      .matches(/[0-9]+/, 'Password shout contain at least one number')\n      .required('This field is required'),\n  });\n\n  async function submitHandler(\n    values: ISignUpData,\n    { resetForm }: { resetForm: () => void }\n  ): Promise<void> {\n    const isValid = await schema.isValid(values);\n\n    if (isValid) {\n      const result = { ...values };\n\n      const isSuccessfull = signUpHandler(result);\n\n      if (isSuccessfull) {\n        resetForm();\n      }\n    }\n  }\n\n  return (\n    <Container className=\"form-container\">\n      <h2>Sign Up</h2>\n      <p>It's quick and easy.</p>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        onSubmit={submitHandler}\n        validationSchema={schema}\n      >\n        <FormikForm>\n          <Field\n            component={TextField}\n            type=\"text\"\n            name=\"name\"\n            fullWidth\n            autoFocus\n            label=\"Enter your name\"\n            size=\"small\"\n            margin=\"normal\"\n          />\n\n          <Field\n            component={TextField}\n            type=\"email\"\n            name=\"email\"\n            fullWidth\n            label=\"Enter your email\"\n            size=\"small\"\n            margin=\"normal\"\n          />\n          <Field\n            component={TextField}\n            type=\"password\"\n            name=\"password\"\n            fullWidth\n            label=\"Enter your password\"\n            size=\"small\"\n            margin=\"normal\"\n          />\n\n          {isLoading && <LinearProgress />}\n\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </FormikForm>\n      </Formik>\n    </Container>\n  );\n};\n","import { SignUp } from '../../components/SignUp/SignUp';\nimport { ISignUpData } from '../../interfaces';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { signUp } from '../../redux/auth/operations';\n\nconst SignUpPage = () => {\n  const dispatch = useAppDispatch();\n\n  const signUpHandler = (data: ISignUpData) => {\n    dispatch(signUp(data));\n    return true;\n  };\n  return (\n    <div>\n      <SignUp signUpHandler={signUpHandler}></SignUp>\n    </div>\n  );\n};\n\nexport default SignUpPage;\n"],"names":["SignUp","signUpHandler","isLoading","useAppSelector","getIsLoading","schema","yup","shape","name","min","matches","required","trim","email","password","values","resetForm","isValid","result","className","initialValues","onSubmit","validationSchema","component","TextField","type","fullWidth","autoFocus","label","size","margin","LinearProgress","Button","variant","color","dispatch","useAppDispatch","data","signUp"],"sourceRoot":""}