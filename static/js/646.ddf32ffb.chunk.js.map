{"version":3,"file":"static/js/646.ddf32ffb.chunk.js","mappings":"gPAEaA,E,QAAYC,EAAAA,IAAH,if,+ECSTC,EAAS,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,cACjBC,GAAYC,EAAAA,EAAAA,GAAeC,EAAAA,IAC3BC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,MAAOF,EAAAA,KAEJG,QACC,mDACA,iBAEDC,SAAS,0BAEZC,SAAUL,EAAAA,KAAaI,SAAS,4BAXuB,wCAczD,WACEE,EADF,mFAEIC,EAFJ,EAEIA,UAFJ,SAIwBR,EAAOS,QAAQF,GAJvC,gBAOUG,GADK,UACSH,GAEEX,EAAcc,IAGlCF,KAZN,4CAdyD,sBA+BzD,OACE,UAACf,EAAD,CAAWkB,UAAU,iBAArB,WACE,wBAAI,aACJ,SAAC,KAAD,CACEC,cAAe,CAAET,MAAO,GAAIG,SAAU,IACtCO,SApCmD,8CAqCnDC,iBAAkBd,EAHpB,UAKE,UAAC,KAAD,YACE,SAAC,KAAD,CACEe,UAAWC,EAAAA,EACXC,KAAK,QACLC,KAAK,QACLC,WAAS,EACTC,MAAM,mBACNC,KAAK,QACLC,OAAO,SACPC,WAAS,KAEX,SAAC,KAAD,CACER,UAAWC,EAAAA,EACXC,KAAK,WACLC,KAAK,WACLC,WAAS,EACTC,MAAM,sBACNC,KAAK,QACLC,OAAO,WAGRzB,IAAa,SAAC2B,EAAA,EAAD,KAEd,SAACC,EAAA,EAAD,CAAQC,QAAQ,YAAYC,MAAM,UAAUV,KAAK,SAAjD,SAA0D,kBAOnE,E,UC7DD,EAdmB,WACjB,IAAMW,GAAWC,EAAAA,EAAAA,KAMjB,OACE,0BACE,SAAClC,EAAD,CAAQC,cANU,SAACkC,GAErB,OADAF,GAASG,EAAAA,EAAAA,IAAMD,KACR,CACR,KAMF,C","sources":["components/SignIn/SignIn.styled.tsx","components/SignIn/SignIn.tsx","pages/SignInPage/SignInPage.tsx"],"sourcesContent":["import styled from '@emotion/styled';\n\nexport const Container = styled.div`\n  h2 {\n    margin: 0;\n  }\n  .form-container {\n    max-width: 400px;\n    margin: 0 auto;\n    margin-top: 20px;\n    border: solid 1px black;\n    padding: 30px;\n    border-radius: 10px;\n    -webkit-box-shadow: 0px 0px 14px 0px rgba(0, 0, 0, 0.75);\n    -moz-box-shadow: 0px 0px 14px 0px rgba(0, 0, 0, 0.75);\n    box-shadow: 0px 0px 14px 0px rgba(0, 0, 0, 0.75);\n  }\n  form {\n  }\n  button {\n    margin: 0 auto;\n    margin-top: 20px;\n    display: block;\n  }\n`;\n","import { Container } from './SignIn.styled';\nimport { Formik, Form as FormikForm, Field } from 'formik';\nimport * as yup from 'yup';\nimport { ISignInProps, ISignInData } from '../../interfaces';\n\nimport { TextField } from 'formik-mui';\nimport { Button, LinearProgress } from '@mui/material';\n\nimport { getIsLoading } from '../../redux/auth/authSlice';\nimport { useAppSelector } from '../../redux/hooks';\n\nexport const SignIn = ({ signInHandler }: ISignInProps) => {\n  const isLoading = useAppSelector(getIsLoading);\n  const schema = yup.object().shape({\n    email: yup\n      .string()\n      .matches(\n        /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n        'Invalid email'\n      )\n      .required('This field is required'),\n\n    password: yup.string().required('This field is required'),\n  });\n\n  async function submitHandler(\n    values: ISignInData,\n    { resetForm }: { resetForm: () => void }\n  ): Promise<void> {\n    const isValid = await schema.isValid(values);\n\n    if (isValid) {\n      const result = { ...values };\n\n      const isSuccessfull = signInHandler(result);\n\n      if (isSuccessfull) {\n        resetForm();\n      }\n    }\n  }\n\n  return (\n    <Container className=\"form-container\">\n      <h2>Sign In</h2>\n      <Formik\n        initialValues={{ email: '', password: '' }}\n        onSubmit={submitHandler}\n        validationSchema={schema}\n      >\n        <FormikForm>\n          <Field\n            component={TextField}\n            type=\"email\"\n            name=\"email\"\n            fullWidth\n            label=\"Enter your email\"\n            size=\"small\"\n            margin=\"normal\"\n            autoFocus\n          />\n          <Field\n            component={TextField}\n            type=\"password\"\n            name=\"password\"\n            fullWidth\n            label=\"Enter your password\"\n            size=\"small\"\n            margin=\"normal\"\n          />\n\n          {isLoading && <LinearProgress />}\n\n          <Button variant=\"contained\" color=\"primary\" type=\"submit\">\n            Submit\n          </Button>\n        </FormikForm>\n      </Formik>\n    </Container>\n  );\n};\n","import { SignIn } from '../../components/SignIn/SignIn';\nimport { ISignInData } from '../../interfaces';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { logIn } from '../../redux/auth/operations';\n\nconst SignInPage = () => {\n  const dispatch = useAppDispatch();\n\n  const signInHandler = (data: ISignInData) => {\n    dispatch(logIn(data));\n    return true;\n  };\n  return (\n    <div>\n      <SignIn signInHandler={signInHandler}></SignIn>\n    </div>\n  );\n};\n\nexport default SignInPage;\n"],"names":["Container","styled","SignIn","signInHandler","isLoading","useAppSelector","getIsLoading","schema","yup","shape","email","matches","required","password","values","resetForm","isValid","result","className","initialValues","onSubmit","validationSchema","component","TextField","type","name","fullWidth","label","size","margin","autoFocus","LinearProgress","Button","variant","color","dispatch","useAppDispatch","data","logIn"],"sourceRoot":""}