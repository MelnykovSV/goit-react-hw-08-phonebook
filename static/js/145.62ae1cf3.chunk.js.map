{"version":3,"file":"static/js/145.62ae1cf3.chunk.js","mappings":"4QAKaA,EAAS,SAAC,GAAqC,IAAnCC,EAAkC,EAAlCA,cACjBC,EAASC,EAAAA,KAAaC,MAAM,CAChCC,KAAMF,EAAAA,KAEHG,IAAI,EAAG,kCACPC,QACC,yHACA,kBAEDC,SAAS,0BACTC,OACHC,MAAOP,EAAAA,KAEJI,QACC,mDACA,iBAEDC,SAAS,0BAEZG,SAAUR,EAAAA,KAEPG,IAAI,EAAG,kCACPC,QAAQ,SAAU,sDAClBA,QAAQ,SAAU,sDAClBA,QAAQ,SAAU,8CAClBC,SAAS,4BAzB2C,wCA4BzD,WACEI,EADF,mFAEIC,EAFJ,EAEIA,UAFJ,SAIwBX,EAAOY,QAAQF,GAJvC,gBAOUG,GADK,UACSH,GAEEX,EAAcc,IAGlCF,KAZN,4CA5ByD,sBA6CzD,OACE,SAAC,IAAD,WACE,SAAC,KAAD,CACEG,cAAe,CAAEX,KAAM,GAAIK,MAAO,GAAIC,SAAU,IAChDM,SAjDmD,8CAkDnDC,iBAAkBhB,EAHpB,UAKE,UAAC,KAAD,YACE,6BAAO,QAEL,SAAC,KAAD,CAAOiB,KAAK,OAAOd,KAAK,OAAOe,YAAY,qBAC3C,2BACE,SAAC,KAAD,CAAcf,KAAK,eAIvB,6BAAO,SAEL,SAAC,KAAD,CAAOc,KAAK,QAAQd,KAAK,QAAQe,YAAY,sBAC7C,2BACE,SAAC,KAAD,CAAcf,KAAK,gBAIvB,6BAAO,YAEL,SAAC,KAAD,CACEc,KAAK,WACLd,KAAK,WACLe,YAAY,yBAEd,2BACE,SAAC,KAAD,CAAcf,KAAK,mBAIvB,mBAAQc,KAAK,SAAb,SAAsB,iBAK/B,E,oBCvED,EAfmB,WACjB,IAAME,GAAWC,EAAAA,EAAAA,KAOjB,OACE,0BACE,SAACtB,EAAD,CAAQC,cAPU,SAACsB,GAGrB,OAFAC,QAAQC,IAAIF,GACZF,GAASK,EAAAA,EAAAA,IAAOH,KACT,CACR,KAMF,C","sources":["components/SignUp/SignUp.tsx","pages/SignUpPage/SignUpPage.tsx"],"sourcesContent":["import { Container } from './SignUp.styled';\nimport { Formik, Form as FormikForm, Field, ErrorMessage } from 'formik';\nimport * as yup from 'yup';\nimport { ISignUpProps, ISignUpData } from '../../interfaces';\n\nexport const SignUp = ({ signUpHandler }: ISignUpProps) => {\n  const schema = yup.object().shape({\n    name: yup\n      .string()\n      .min(3, 'Minimum input length 3 symbols')\n      .matches(\n        /^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$/,\n        'Invalid format'\n      )\n      .required('This field is required')\n      .trim(),\n    email: yup\n      .string()\n      .matches(\n        /^[a-zA-Z0-9._%+-]+@[a-zA-Z0-9.-]+\\.[a-zA-Z]{2,}$/,\n        'Invalid email'\n      )\n      .required('This field is required'),\n\n    password: yup\n      .string()\n      .min(6, 'Minimum input length 6 symbols')\n      .matches(/[a-z]+/, 'Password shout contain at least one regular letter')\n      .matches(/[A-Z]+/, 'Password shout contain at least one capital letter')\n      .matches(/[0-9]+/, 'Password shout contain at least one number')\n      .required('This field is required'),\n  });\n\n  async function submitHandler(\n    values: ISignUpData,\n    { resetForm }: { resetForm: () => void }\n  ): Promise<void> {\n    const isValid = await schema.isValid(values);\n\n    if (isValid) {\n      const result = { ...values };\n\n      const isSuccessfull = signUpHandler(result);\n\n      if (isSuccessfull) {\n        resetForm();\n      }\n    }\n  }\n\n  return (\n    <Container>\n      <Formik\n        initialValues={{ name: '', email: '', password: '' }}\n        onSubmit={submitHandler}\n        validationSchema={schema}\n      >\n        <FormikForm>\n          <label>\n            Name\n            <Field type=\"text\" name=\"name\" placeholder=\"Enter your name\" />\n            <span>\n              <ErrorMessage name=\"name\" />\n            </span>\n          </label>\n\n          <label>\n            Email\n            <Field type=\"email\" name=\"email\" placeholder=\"Enter your email\" />\n            <span>\n              <ErrorMessage name=\"email\" />\n            </span>\n          </label>\n\n          <label>\n            Password\n            <Field\n              type=\"password\"\n              name=\"password\"\n              placeholder=\"Enter your password\"\n            />\n            <span>\n              <ErrorMessage name=\"password\" />\n            </span>\n          </label>\n\n          <button type=\"submit\">Submit</button>\n        </FormikForm>\n      </Formik>\n    </Container>\n  );\n};\n","import { SignUp } from '../../components/SignUp/SignUp';\nimport { ISignUpData } from '../../interfaces';\nimport { useAppDispatch } from '../../redux/hooks';\nimport { signUp } from '../../redux/auth/operations';\n\nconst SignUpPage = () => {\n  const dispatch = useAppDispatch();\n\n  const signUpHandler = (data: ISignUpData) => {\n    console.log(data);\n    dispatch(signUp(data));\n    return true;\n  };\n  return (\n    <div>\n      <SignUp signUpHandler={signUpHandler}></SignUp>\n    </div>\n  );\n};\n\nexport default SignUpPage;\n"],"names":["SignUp","signUpHandler","schema","yup","shape","name","min","matches","required","trim","email","password","values","resetForm","isValid","result","initialValues","onSubmit","validationSchema","type","placeholder","dispatch","useAppDispatch","data","console","log","signUp"],"sourceRoot":""}